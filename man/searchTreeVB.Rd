% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/searchTreeVB.R
\name{searchTreeVB}
\alias{searchTreeVB}
\alias{search.parent}
\alias{search.leaves}
\alias{search.rootnode}
\alias{search.vb}
\title{Search Tree Graph for Variable Block Construction.}
\usage{
search.parent(M, loc)

search.leaves(M, loc)

search.rootnode(M, loc, max.size, dist.measure, subgraph = F)

search.vb(M, seq)
}
\arguments{
\item{M}{A matrix of merges which is obtained from hclust() output.}

\item{loc}{An index or a sequence of indices of nodes in the tree.}

\item{max.size}{Maximum size of variable blocks.}

\item{dist.measure}{Distance measure of the tree.}

\item{seq}{A sequence of root nodes of subtrees corresponding to variable blocks}
}
\value{
search.parent gives a vector of parent node indices of given node indices in a tree.

search.leaves gives a vector of leaves sets of a given node index in a tree.

search.rootnode gives a vector of root node indices for variable blocks given the first node (loc), maximum size of block (max.size), and distance measure (dist).

search.vb gives a list of leaves sets for each root node (seq).
}
\description{
Functions used to construct variable blocks.
}
\examples{
set.seed(1)
dat = genData2(n=300,p1=100,p2=100,C=5,rep=1) 
X = dat[[1]]$X_total
Y = dat[[1]]$z
n = dim(X)[1];p = dim(X)[2]
# The number of clusters.
C = 5

# Maximum block size is set 5\% of the total dimension.
max.vb.size = 10
# Calculate Mutual Information.
pwmi = pairwiseMI(X)

DD = as.dist(t(1/pwmi))
hclmi = hclust(DD, method = 'complete')
M = hclmi$merge
node.size = nodeSize(M)
candi.node = which(node.size <= max.vb.size)
fst.rootnode = candi.node[which.max(search.parent(M,candi.node))]  # find initial root node 
seq.rootnode = search.rootnode(M,fst.rootnode,max.vb.size,DD)         # root node index of each block
vb = search.vb(M,seq.rootnode)
}
